---

env:
  browser: false
  mocha: true
  node: true
  es6: true

globals:
  __DEV__: true
  describe: true
  beforeEach: true
  afterEach: true
  it: true
  expect: true
  fixtures: true
  sinon: true

rules:
  # ERRORS
  space-before-blocks: 2
  brace-style: 2
  space-after-keywords: 2
  strict: [2, "global"]
  comma-dangle: [2, "always-multiline"]
  camelcase: [2, {"properties": "never"}]
  # Make this a warning for now. We do this in a few places so we might need to
  # disable
  no-unused-expressions: 2
  no-nested-ternary: 2
  no-self-compare: 2
  no-unneeded-ternary: 2
  eol-last: 2
  dot-notation: 2
  dot-location: [2, "property"]
  consistent-return: 2
  no-unused-vars: [2, {"args": "none"}]
  quotes: [2, "single", "avoid-escape"]
  no-shadow: 2
  no-multi-spaces: 2

  # WISHLIST. One day...
  # We'll need a custom version of this that does a subset of the whole rule.
  # Otherwise this is just too noisy.
  # valid-jsdoc: 1
  # Ideally, we could just warn when *new* lines are added that exceed 80 chars
  # while not warning about existing ones (often URLs, etc. which are
  # necessarily long), but we don't have a good way to do so.
  # max-len: [0, 80]

  # DISABLED. These aren't compatible with our style
  # We use this for private/internal variables
  no-underscore-dangle: 0
  # We pass constructors around / access them from members
  new-cap: 0
  no-use-before-define:
    - 2
    - nofunc
  # We do this in a few places to align values
  key-spacing: 0
  # It's nice to be able to leave catch blocks empty
  no-empty: 0
  # It makes code more readable to make this explicit sometimes
  no-undef-init: 0

  # BROKEN. We'd like to turn these back on.
  # causes a ton of noise, eslint is too picky?
  block-scoped-var: 0

  operator-assignment:
    - 2
    - always

  semi: 2
